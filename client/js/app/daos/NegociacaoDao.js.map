{"version":3,"sources":["../../app-es6/daos/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","console","log","target","error","message","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCACKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AACnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CACLO,WADK,CACO,CAAC,MAAKN,MAAN,CADP,EACsB,WADtB,EAELO,WAFK,CAEO,MAAKP,MAFZ,EAGLQ,GAHK,CAGDP,UAHC,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,YAAM;;AAEtBN,wCAAQ,kCAAR;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,UAACC,CAAD,EAAO;AACrBC,wCAAQC,GAAR,CAAYF,EAAEG,MAAF,CAASC,KAAT,CAAeC,OAA3B;AACAZ,uCAAO,uCAAP;AACH,6BAHD;AAIH,yBAhBM,CAAP;AAkBH;;;4CACM;AAAA;;AACH,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIa,SAAS,OAAKlB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRkB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOR,SAAP,GAAmB,aAAI;AACnB,oCAAIW,QAAQT,EAAEG,MAAF,CAASO,MAArB;;AAEA,oCAAGD,KAAH,EAAS;AACL,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI5B,UAAJ,CAAe0B,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAP,0CAAMQ,QAAN;AACH,iCAJD,MAKI;AACAzB,4CAAQgB,WAAR;AACH;AACJ,6BAXD;;AAaAF,mCAAOP,OAAP,GAAiB,aAAK;AAClBE,wCAAQC,GAAR,CAAY,YAAYF,EAAEG,MAAF,CAASC,KAAT,CAAec,IAAvC;AACAzB,uCAAO,wCAAP;AACH,6BAHD;AAKH,yBA1BM,CAAP;AA2BH;;;iDACW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT8B,KAHS,EAAd;;AAKIzB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,mCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBE,wCAAQC,GAAR,CAAYF,EAAEG,MAAF,CAASC,KAAT,CAAeC,OAA3B;AACAZ,uCAAO,qCAAP;AACH,6BAJD;AAMP,yBAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\nexport class NegociacaoDao {\n\n    constructor(connection){\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n        return new Promise((resolve, reject) => {\n\n            let request = this._connection\n                    .transaction([this._store], 'readwrite')\n                    .objectStore(this._store)\n                    .add(negociacao);\n    \n            request.onsuccess = () => {\n\n                resolve(\"Negociação adiciona com sucesso!\");\n            };\n\n            request.onerror = (e) => {\n                console.log(e.target.error.message);\n                reject(\"Não foi possível adicionar Negociação\");\n            };\n        });\n\n    }\n    lista(){\n        return new Promise((resolve, reject) =>{\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = e =>{\n                let atual = e.target.result;\n\n                if(atual){\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue();\n                }\n                else{\n                    resolve(negociacoes);\n                }\n            };\n\n            cursor.onerror = e => {\n                console.log('Error: ' + e.target.error.name);\n                reject(\"Não foi possível listar as negociações\");\n            };\n            \n        });\n    }\n    apagaTodos(){\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n                request.onsuccess = e => resolve(\"Negociações apagadas com sucesso!\");\n\n                request.onerror = e => {\n\n                    console.log(e.target.error.message);\n                    reject(\"Não foi possível apagar negociações\");\n                }\n\n        });\n    }\n    \n\n}"]}