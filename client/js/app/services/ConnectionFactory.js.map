{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_criaStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAI;;AAE9BT,kDAAkBU,WAAlB,CAA8BC,EAAEC,MAAF,CAASC,MAAvC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;;AAEZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACH,qCAFD;AAGH;AACD;AACAE,wCAAQL,UAAR;AAEH,6BAbD;;AAeAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,6BAND;AAOH,yBAhCM,CAAP;AAiCH;;;gDAEkBtB,U,EAAW;;AAE1BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAOH;;;sDACuB;AACpB5B;AACAD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["\n    const stores = ['negociacoes'];\n    const version = 5;\n    const dbName = 'aluraFrame';\n    \n    let connection = null;\n    \n    let close = null;\n\n    export class ConnectionFactory{\n    \n        constructor(){\n            throw new Error(\"não é possível criar instâncias de ConnectionFactory\");\n        }\n    \n        static getConnection(){\n            return new Promise((resolve, reject) => {\n    \n                let openRequest = window.indexedDB.open(dbName, version);\n    \n                openRequest.onupgradeneeded = e =>{\n    \n                    ConnectionFactory._criaStores(e.target.result);\n                    \n                };\n                \n                openRequest.onsuccess = e => {\n                    \n                    if(!connection) {\n\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function(){\n                            throw new Error(\"esse método não pode ser invocado\");\n                        };                        \n                    }\n                    // recebe conexão já existente ou uma que acabou de ser criada\n                    resolve(connection);\n                    \n                };\n                \n                openRequest.onerror = e => {\n                    \n                    console.log(e.target.error);\n                    \n                    reject(e.target.error.name);\n                    \n                };\n            });\n        }\n        \n        static _criaStores(connection){\n            \n            stores.forEach(store => {\n                \n                if(connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);                \n                connection.createObjectStore(store, {autoIncrement: true});\n            });\n    \n        }\n        static closeConnection(){\n            close();\n            connection = null;\n        }\n    }"]}